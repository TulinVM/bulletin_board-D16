"""
Django settings for bulletin_board project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

import logging
logger = logging.getLogger(__name__)

from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'asdw1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['192.168.31.135']
ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'bulletin',
    'contact',
    'protect',
    'users',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bulletin_board.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',

]

SITE_ID = 1
WSGI_APPLICATION = 'bulletin_board.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

AUTH_USER_MODEL = 'users.CustomUser'

LOGIN_URL = 'accounts/login/'
LOGIN_REDIRECT_URL = '/protect'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_FORMS = {'login': 'users.forms.MyLoginForm', 'signup': 'users.forms.MySignupForm', }
ACCOUNT_ADAPTER = 'users.adapter.MyAccountAdapter'

EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'TulinVM51'  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = 'Vv7314870'  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно

DEFAULT_FROM_EMAIL = 'TulinVM51@yandex.ru'  # здесь указываем уже свою ПОЛНУЮ почту, с которой будут отправляться письма

SERVER_EMAIL = 'TulinVM51@yandex.ru'

# D7
CELERY_BROKER_URL = 'redis://:qjUWGrrkcYhAJfqQrrPr8eltT0q2i1vn@redis-13191.c1.asia-northeast1-1.gce.cloud.redislabs.com:13191'
CELERY_RESULT_BACKEND = 'redis://:qjUWGrrkcYhAJfqQrrPr8eltT0q2i1vn@redis-13191.c1.asia-northeast1-1.gce.cloud.redislabs.com:13191'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

DEFAULT_AUTO_FIELD='django.db.models.AutoField'

#Логирование

LOGGING = {
    'version': 1, #ключ version всегда определяется как 1, на текущий момент это единственно допустимое значение
    'disable_existing_loggers': False, # контролирует работу существующей (стандартной) схемы логирования Django.
    'formatters': { #простой формат записи сообщений. В данном случае это уровень логирования сообщения и само сообщение.
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s', # пункт 1 часть 1
        },
        'warning_console': { # пункт 1 часть 2
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s',
        },
        'general_file': { # пункт 2
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
        },
        'error_file': { # пункт 3
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s',
        },
        'security_file': { # пункт 4
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
        },
        'error_mail': {  # пункт 5
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s',
        },
    },# Далее определен фильтр, который пропускает записи только в случае, когда DEBUG = True и False .
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {  # пункт 1, отправляет сообщения  DEBUG выше в консоль
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # накладывается фильтр, определенный выше
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'console_warning': { # пункт 1, отправляет для сообщений WARNING
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning_console',
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'error_file',
        },
        'file_general': { #2 в файл general выводятся сообщения
            'level': 'INFO',
            'filters': ['require_debug_false'],  # накладывается фильтр debug=false
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'general_file',
        },
        'file_errors': { #3 в файл errors выводятся сообщения
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'error_file',
        },
        'file_security': { # пункт 4, в файл security.log попадают сообщения
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'security_file',
        },
        'mail_admins': { # пункт 5, отправка на почту сообщений ERROR
            'level': 'ERROR',
            'filters': ['require_debug_false'], # при debug_false
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'error_mail',
        },
    },
    'loggers': {
        'django': {  # Регистратор django отправляет все сообщения на консоль
            'handlers': ['console', 'console_warning', 'console_error', 'file_general'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.template': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db_backends': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['file_security'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}